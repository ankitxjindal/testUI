{
	"chart": {
		"offset": {
			"x": 0,
			"y": 0
		},
		"nodes": {
			"7fa446a4-c4e3-453f-af81-eef7473e3aba": {
				"id": "7fa446a4-c4e3-453f-af81-eef7473e3aba",
				"position": {
					"x": 292,
					"y": 28.666656494140625
				},
				"orientation": 0,
				"type": "input-output",
				"ports": {
					"portA": {
						"id": "portA",
						"type": "input",
						"properties": {
							"value": "yes"
						},
						"position": {
							"x": 100.5,
							"y": -4.5
						}
					},
					"portB": {
						"id": "portB",
						"type": "output",
						"properties": {
							"value": "yes"
						},
						"position": {
							"x": 100.5,
							"y": 79.5
						}
					}
				},
				"properties": {
					"custom": "LogParser"
				},
				"size": {
					"width": 200,
					"height": 75
				}
			},
			"2db403dc-a1c1-40d7-8d75-a2f0a338ea68": {
				"id": "2db403dc-a1c1-40d7-8d75-a2f0a338ea68",
				"position": {
					"x": 630,
					"y": 198.66665649414062
				},
				"orientation": 0,
				"type": "input-output",
				"ports": {
					"portA": {
						"id": "portA",
						"type": "input",
						"properties": {
							"value": "yes"
						},
						"position": {
							"x": 100.5,
							"y": -4.5
						}
					},
					"portB": {
						"id": "portB",
						"type": "output",
						"properties": {
							"value": "yes"
						},
						"position": {
							"x": 100.5,
							"y": 79.5
						}
					}
				},
				"properties": {
					"custom": "CodeExecutor"
				},
				"size": {
					"width": 200,
					"height": 75
				}
			}
		},
		"links": {
			"a5f15a18-0625-43f9-91a8-0dab8908a841": {
				"id": "a5f15a18-0625-43f9-91a8-0dab8908a841",
				"from": {
					"nodeId": "7fa446a4-c4e3-453f-af81-eef7473e3aba",
					"portId": "portB",
					"nodeExtraInfo": {
						"id": "7fa446a4-c4e3-453f-af81-eef7473e3aba",
						"position": {
							"x": 292,
							"y": 28.666656494140625
						},
						"orientation": 0,
						"type": "input-output",
						"ports": {
							"portA": {
								"id": "portA",
								"type": "input",
								"properties": {
									"value": "yes"
								},
								"position": {
									"x": 100.5,
									"y": -4.5
								}
							},
							"portB": {
								"id": "portB",
								"type": "output",
								"properties": {
									"value": "yes"
								},
								"position": {
									"x": 100.5,
									"y": 79.5
								}
							}
						},
						"properties": {
							"custom": "LogParser"
						},
						"size": {
							"width": 200,
							"height": 75
						}
					}
				},
				"to": {
					"nodeId": "2db403dc-a1c1-40d7-8d75-a2f0a338ea68",
					"portId": "portA",
					"nodeExtraInfo": {
						"id": "2db403dc-a1c1-40d7-8d75-a2f0a338ea68",
						"position": {
							"x": 630,
							"y": 198.66665649414062
						},
						"orientation": 0,
						"type": "input-output",
						"ports": {
							"portA": {
								"id": "portA",
								"type": "input",
								"properties": {
									"value": "yes"
								},
								"position": {
									"x": 100.5,
									"y": -4.5
								}
							},
							"portB": {
								"id": "portB",
								"type": "output",
								"properties": {
									"value": "yes"
								},
								"position": {
									"x": 100.5,
									"y": 79.5
								}
							}
						},
						"properties": {
							"custom": "CodeExecutor"
						},
						"size": {
							"width": 200,
							"height": 75
						}
					}
				}
			}
		},
		"selected": {},
		"hovered": {}
	},
	"jsonData": {
		"7fa446a4-c4e3-453f-af81-eef7473e3aba": {
			"RuleName": "LogParser",
			"Comment": "To parse tables from the the txt or log files",
			"Constraints1": "Write DataConfig below in the same order as they occur in file to parse",
			"Constraints2": "Copy&Paste the headers of all tables involved, and if there are more variations of same header mention it as well with comma separator",
			"Constraints3": "Regex allowed in FilePattern, 'Skip': line distance b/w data and header, 'Transpose': if Df transpose is needed for data, 'SheetNameToExport': sheetname in csv",
			"InputKey": "Raw",
			"FolderPath": "folder/path",
			"FilePattern": "*.log",
			"MakeSingleExcel": "True",
			"OutputFileName": "output.csv",
			"DictToReplace": {
				" (ALLOWED)": "",
				" (NOT_ALLOWED)": ""
			},
			"DataConfig": [{
				"Header": "abc,def,ghj",
				"Operation": "splitColumnsAndKeepOriginal({'col': ['MO'], 'afterSplit': ['int', 'string']})",
				"SheetNameToExport": "export",
				"Skip": "1",
				"Transpose": "1",
				"DataType": [
					"string",
					"string",
					"string"
				],
				"ColumnsToFold": [
					"a",
					"b"
				]
			}]
		},
		"2db403dc-a1c1-40d7-8d75-a2f0a338ea68": {
			"RuleName": "CODE_EXECUTOR",
			"Comment": "This rule calls the remote command through the function provided",
			"InputKey": "",
			"Type": "Remote",
			"Authentication": {
				"hostName": "10.174.134.75",
				"userName": "abc",
				"password": "abc@123"
			},
			"Commands": {
				"ExecuteCommand": [{
					"BaseCommand": "python",
					"CodePath": "codepath.py",
					"FilePath": "file/path",
					"Args": [
						"test",
						"$config_ftp_path"
					],
					"KeyArgs": {
						"--name": "$--name",
						"--sirname": "$input_file_type",
						"--inputpath": "$--outputpath",
						"--projectname": "$projectName",
						"--token": "$token"
					},
					"InputDataFrame": "inputdf",
					"Operation": "CodeExecutorResponse({})",
					"RequestParams": {
						"Operation": "CodeExecutorHeader({})",
						"AdditionalDF": [
							"asd"
						]
					}
				}]
			},
			"ResponseKeys": "",
			"OutputKey": "CODE_CONFIG"
		}
	}
}
